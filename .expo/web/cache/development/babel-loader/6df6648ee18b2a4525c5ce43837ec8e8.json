{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/thebeliverbot/Desktop/practice-stuff/news-app/API/Context.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { getNewsAPI, getSourceAPI } from \"./api\";\nexport var NewsContext = createContext();\n\nvar Context = function Context(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      news = _useState2[0],\n      setNews = _useState2[1];\n\n  var _useState3 = useState(\"general\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      category = _useState4[0],\n      setCategory = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      source = _useState6[0],\n      setSource = _useState6[1];\n\n  var _useState7 = useState(1),\n      _useState8 = _slicedToArray(_useState7, 2),\n      index = _useState8[0],\n      setIndex = _useState8[1];\n\n  var _useState9 = useState(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      darkTheme = _useState10[0],\n      setDarkTheme = _useState10[1];\n\n  var fetchNews = function fetchNews() {\n    var reset,\n        _await$axios$get,\n        data,\n        _args = arguments;\n\n    return _regeneratorRuntime.async(function fetchNews$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            reset = _args.length > 0 && _args[0] !== undefined ? _args[0] : category;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(getNewsAPI(reset)));\n\n          case 3:\n            _await$axios$get = _context.sent;\n            data = _await$axios$get.data;\n            setNews(data);\n            setIndex(1);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var fetchNewsfromSource = function fetchNewsfromSource() {\n    var _await$axios$get2, data;\n\n    return _regeneratorRuntime.async(function fetchNewsfromSource$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(getSourceAPI(source)));\n\n          case 3:\n            _await$axios$get2 = _context2.sent;\n            data = _await$axios$get2.data;\n            setNews(data);\n            setIndex(1);\n            _context2.next = 12;\n            break;\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n\n  useEffect(function () {\n    fetchNews();\n  }, [category]);\n  useEffect(function () {\n    fetchNewsfromSource();\n  }, [source]);\n  return React.createElement(NewsContext.Provider, {\n    value: {\n      news: news,\n      setCategory: setCategory,\n      index: index,\n      setIndex: setIndex,\n      setSource: setSource,\n      darkTheme: darkTheme,\n      setDarkTheme: setDarkTheme,\n      fetchNews: fetchNews\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport default Context;","map":{"version":3,"sources":["/home/thebeliverbot/Desktop/practice-stuff/news-app/API/Context.js"],"names":["axios","React","createContext","useEffect","useState","getNewsAPI","getSourceAPI","NewsContext","Context","children","news","setNews","category","setCategory","source","setSource","index","setIndex","darkTheme","setDarkTheme","fetchNews","reset","get","data","fetchNewsfromSource","console","log"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,SAASC,UAAT,EAAqBC,YAArB;AAEA,OAAO,IAAMC,WAAW,GAAGL,aAAa,EAAjC;;AAEP,IAAMM,OAAO,GAAG,SAAVA,OAAU,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAChC,kBAAwBL,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,MAAOM,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAAgCP,QAAQ,CAAC,SAAD,CAAxC;AAAA;AAAA,MAAOQ,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAA4BT,QAAQ,EAApC;AAAA;AAAA,MAAOU,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAA0BX,QAAQ,CAAC,CAAD,CAAlC;AAAA;AAAA,MAAOY,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAAkCb,QAAQ,CAAC,IAAD,CAA1C;AAAA;AAAA,MAAOc,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAOC,YAAAA,KAAP,2DAAeT,QAAf;AAAA;AAAA,6CACOZ,KAAK,CAACsB,GAAN,CAAUjB,UAAU,CAACgB,KAAD,CAApB,CADP;;AAAA;AAAA;AACRE,YAAAA,IADQ,oBACRA,IADQ;AAEhBZ,YAAAA,OAAO,CAACY,IAAD,CAAP;AACAN,YAAAA,QAAQ,CAAC,CAAD,CAAR;;AAHgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAMA,MAAMO,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEDxB,KAAK,CAACsB,GAAN,CAAUhB,YAAY,CAACQ,MAAD,CAAtB,CAFC;;AAAA;AAAA;AAEhBS,YAAAA,IAFgB,qBAEhBA,IAFgB;AAGxBZ,YAAAA,OAAO,CAACY,IAAD,CAAP;AACAN,YAAAA,QAAQ,CAAC,CAAD,CAAR;AAJwB;AAAA;;AAAA;AAAA;AAAA;AAMxBQ,YAAAA,OAAO,CAACC,GAAR;;AANwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B;;AAUAvB,EAAAA,SAAS,CAAC,YAAM;AACdiB,IAAAA,SAAS;AACV,GAFQ,EAEN,CAACR,QAAD,CAFM,CAAT;AAIAT,EAAAA,SAAS,CAAC,YAAM;AACdqB,IAAAA,mBAAmB;AACpB,GAFQ,EAEN,CAACV,MAAD,CAFM,CAAT;AAIA,SACE,oBAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLJ,MAAAA,IAAI,EAAJA,IADK;AAELG,MAAAA,WAAW,EAAXA,WAFK;AAGLG,MAAAA,KAAK,EAALA,KAHK;AAILC,MAAAA,QAAQ,EAARA,QAJK;AAKLF,MAAAA,SAAS,EAATA,SALK;AAMLG,MAAAA,SAAS,EAATA,SANK;AAOLC,MAAAA,YAAY,EAAZA,YAPK;AAQLC,MAAAA,SAAS,EAATA;AARK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYGX,QAZH,CADF;AAgBD,CA/CD;;AAiDA,eAAeD,OAAf","sourcesContent":["import axios from \"axios\";\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { getNewsAPI, getSourceAPI } from \"./api\";\n\nexport const NewsContext = createContext();\n\nconst Context = ({ children }) => {\n  const [news, setNews] = useState([]);\n  const [category, setCategory] = useState(\"general\");\n  const [source, setSource] = useState();\n  const [index, setIndex] = useState(1);\n  const [darkTheme, setDarkTheme] = useState(true);\n\n  const fetchNews = async (reset = category) => {\n    const { data } = await axios.get(getNewsAPI(reset));\n    setNews(data);\n    setIndex(1);\n  };\n\n  const fetchNewsfromSource = async () => {\n    try {\n      const { data } = await axios.get(getSourceAPI(source));\n      setNews(data);\n      setIndex(1);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchNews();\n  }, [category]);\n\n  useEffect(() => {\n    fetchNewsfromSource();\n  }, [source]);\n\n  return (\n    <NewsContext.Provider\n      value={{\n        news,\n        setCategory,\n        index,\n        setIndex,\n        setSource,\n        darkTheme,\n        setDarkTheme,\n        fetchNews,\n      }}\n    >\n      {children}\n    </NewsContext.Provider>\n  );\n};\n\nexport default Context;"]},"metadata":{},"sourceType":"module"}